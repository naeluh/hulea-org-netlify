{"version":3,"file":"static/webpack/static/development/pages/work/entry.js.639e40b2a51e847d707f.hot-update.js","sources":["webpack:///./components/PostList.jsx"],"sourcesContent":["import { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Router } from \"../routes\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Head from \"next/head\";\n\nconst POSTS_PER_PAGE = 10;\n\nfunction handleClick(event, id, url) {\n  event.preventDefault();\n  Router.push({\n    pathname: `/work/${url}`,\n    asPath: `/work/${url}`\n  });\n}\n\nfunction PostList({ data: { loading, error, webs }, title, extraClass }) {\n  if (error) return <ErrorMessage message=\"Error loading posts.\" />;\n  if (webs && webs.length) {\n    return (\n      <section className={extraClass}>\n        <Head>\n          {title === undefined ? (\n            <>\n              <title>Work</title>\n              <meta name=\"title\" content=\"Nick Hulea's Work and Projects\" />\n              <meta\n                name=\"description\"\n                content=\"Nick Hulea's Work and Projects\"\n              />\n            </>\n          ) : (\n            \"\"\n          )}\n        </Head>\n        {title === undefined ? <h1>Work</h1> : \"\"}\n        <ul>\n          {webs.map((post, index) =>\n            post.URL !== title ? (\n              <li key={index + 1}>\n                <a\n                  props={post._id}\n                  href={`/work/${post.Data.Link}`}\n                  onClick={event =>\n                    handleClick(event, post._id, post.Data.Link)\n                  }\n                >\n                  {post.Image !== null /* && title === undefined */ ? (\n                    <span\n                      className=\"imgHero\"\n                      style={{\n                        backgroundImage: `url(https://strapi.hulea.org/${\n                          post.Image.url\n                        })`\n                      }}\n                    />\n                  ) : (\n                    \"\"\n                  )}\n                  <h2>{post.Title}</h2>\n                </a>\n              </li>\n            ) : (\n              \"\"\n            )\n          )}\n        </ul>\n        <style jsx>{`\n          * {\n            box-sizing: border-box;\n          }\n          a {\n            position: relative;\n          }\n          ul {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n          }\n          li {\n            margin-bottom: 2em;\n          }\n          h2 {\n            position: absolute;\n            bottom: 5px;\n            left: 25px;\n            padding: 20px 30px;\n            color: #fff;\n            background-color: #111;\n          }\n          @media only screen and (max-width: 480px) {\n            h2 {\n              font-size: 14px;\n              padding: 10px 15px;\n            }\n          }\n        `}</style>\n      </section>\n    );\n  }\n  return <div>Loading</div>;\n}\n\nexport const allPosts = gql`\n  query {\n    webs {\n      _id\n      Title\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Description\n      Data\n      URL\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n};\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nexport default graphql(allPosts, {\n  props: ({ data }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return previousResult;\n          }\n          return Object.assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          });\n        }\n      });\n    }\n  })\n})(PostList);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAOA;AAAA;AAGA;AACA;AADA;AAFA;AAAA;AAWA;AAAA;AAtBA;AAjBA;AAAA;AA+EA;AACA;AAAA;AACA;AACA;AACA;AAoBA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAZA;AAcA;AAjBA;AAAA;AADA;;;;A","sourceRoot":""}