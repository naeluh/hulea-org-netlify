{"version":3,"file":"static/webpack/static/development/pages/work/entry.js.b690ed089fff835997d4.hot-update.js","sources":["webpack:///./components/Post.jsx"],"sourcesContent":["// @ts-check\n\nimport React from \"react\";\nimport { withRouter, Router, Link } from \"next/router\";\nimport { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ReactMarkdown from \"react-markdown\";\nimport Head from \"next/head\";\nimport PostList from \"./PostList\";\n\nfunction Post({ data: { error, webs } }) {\n  let web = webs[0];\n  let image =\n    web.Image !== null ? (\n      <span\n        id=\"image\"\n        className=\"imgHero\"\n        style={{\n          backgroundImage: `url(https://strapi.hulea.org/${web.Image.url})`\n        }}\n      />\n    ) : (\n      \"\"\n    );\n  if (error) return <ErrorMessage message=\"Error loading post.\" />;\n  if (web) {\n    return (\n      <article>\n        <section>\n          <Head>\n            <title>{web.Title}</title>\n            <meta name=\"title\" content={web.Title} />\n            <meta name=\"description\" content={web.Description} />\n          </Head>\n          <div key={web.id}>\n            <h1>{web.Title}</h1>\n            {image}\n            <a className=\"dash-link\" target=\"_blank\" href={web.Link}>\n              {web.Title}\n            </a>\n            <ReactMarkdown source={web.Description} />\n          </div>\n        </section>\n        <PostList title={web.URL} extraClass=\"worklist\" />\n      </article>\n    );\n  }\n  return <div>Loading</div>;\n}\n\nconst post = gql`\n  query webs($url: String!) {\n    webs(where: { URL: $url }, limit: 1) {\n      Title\n      _id\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Description\n      Data\n      URL\n      Link\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nconst ComponentWithMutation = graphql(post, {\n  options: ({ router: { query } }) => ({\n    variables: {\n      url: query.url\n    }\n  }),\n  props: ({ data }) => ({\n    data\n  })\n})(Post);\n\nexport default withRouter(ComponentWithMutation);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAHA;AAUA;AAAA;AAAA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAsBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AANA;AAWA;;;;A","sourceRoot":""}