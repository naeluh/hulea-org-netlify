{"version":3,"file":"static/webpack/static/development/pages/about.js.c579a1bccd168afeca38.hot-update.js","sources":["webpack:///./components/BasicPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { withRouter } from \"next/router\";\nimport { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ReactMarkdown from \"react-markdown\";\nimport Head from \"next/head\";\n\nfunction Post({ data: { error, basics } }) {\n  let basic = basics !== undefined ? basics[0] : \"\";\n  if (error || basics === \"\")\n    return <ErrorMessage message=\"Error loading blog post.\" />;\n  if (basic) {\n    return (\n      <section>\n        <Head>\n          <title>{basic.Title}</title>\n          <meta name=\"title\" content={basic.Title} />\n          <meta name=\"description\" content={basic.Body} />\n        </Head>\n        <div key={basic.id}>\n          <h1>{basic.Title}</h1>\n          <ReactMarkdown source={basic.Body} />\n        </div>\n        <style jsx>{``}</style>\n      </section>\n    );\n  }\n  return <div>Loading</div>;\n}\n\nconst post = gql`\n  query basics($url: String!) {\n    basics(where: { URL: $url }, limit: 1) {\n      Title\n      _id\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Body\n      URL\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nconst ComponentWithMutation = graphql(post, {\n  options: ({ router: { pathname } }) => ({\n    variables: {\n      url: pathname.replace(\"/\", \"\")\n    }\n  }),\n  props: ({ data }) => ({\n    data\n  })\n})(Post);\n\nexport default withRouter(ComponentWithMutation);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AARA;AAAA;AAaA;AACA;AAAA;AACA;AACA;AACA;AAoBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AANA;AAWA;;;;A","sourceRoot":""}