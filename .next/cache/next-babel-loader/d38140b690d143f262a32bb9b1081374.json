{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    webs {\\n      _id\\n      Title\\n      Image {\\n        url\\n        ext\\n        provider\\n        size\\n      }\\n      Description\\n      Data\\n      URL\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Router } from \"next/router\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Head from \"next/head\";\nvar POSTS_PER_PAGE = 10;\n\nfunction handleClick(event, id, url) {\n  event.preventDefault();\n  Router.push({\n    pathname: \"/work/\".concat(url),\n    asPath: \"/work/\".concat(url)\n  });\n}\n\nfunction PostList(_ref) {\n  var _ref$data = _ref.data,\n      loading = _ref$data.loading,\n      error = _ref$data.error,\n      webs = _ref$data.webs,\n      title = _ref.title,\n      extraClass = _ref.extraClass;\n  if (error) return React.createElement(ErrorMessage, {\n    message: \"Error loading posts.\"\n  });\n\n  if (webs && webs.length) {\n    return React.createElement(\"section\", {\n      className: \"jsx-3463146278\" + \" \" + (extraClass || \"\")\n    }, React.createElement(Head, null, title === undefined ? React.createElement(React.Fragment, null, React.createElement(\"title\", {\n      className: \"jsx-3463146278\"\n    }, \"Work\"), React.createElement(\"meta\", {\n      name: \"title\",\n      content: \"Nick Hulea's Work and Projects\",\n      className: \"jsx-3463146278\"\n    }), React.createElement(\"meta\", {\n      name: \"description\",\n      content: \"Nick Hulea's Work and Projects\",\n      className: \"jsx-3463146278\"\n    })) : \"\"), title === undefined ? React.createElement(\"h1\", {\n      className: \"jsx-3463146278\"\n    }, \"Work\") : \"\", React.createElement(\"ul\", {\n      className: \"jsx-3463146278\"\n    }, webs.map(function (post, index) {\n      return post.URL !== title ? React.createElement(\"li\", {\n        key: index + 1,\n        className: \"jsx-3463146278\"\n      }, React.createElement(\"a\", {\n        props: post._id,\n        href: \"/work/\".concat(post.Data.Link),\n        className: \"jsx-3463146278\"\n      }, post.Image !== null\n      /* && title === undefined */\n      ? React.createElement(\"span\", {\n        style: {\n          backgroundImage: \"url(https://strapi.hulea.org/\".concat(post.Image.url, \")\")\n        },\n        className: \"jsx-3463146278\" + \" \" + \"imgHero \".concat(extraClass, \"__image\")\n      }) : \"\", title === undefined ? React.createElement(\"h2\", {\n        className: \"jsx-3463146278\"\n      }, post.Title) : React.createElement(\"p\", {\n        className: \"jsx-3463146278\"\n      }, post.Title))) : \"\";\n    })), React.createElement(_JSXStyle, {\n      id: \"3463146278\"\n    }, [\"*.jsx-3463146278{box-sizing:border-box;}\", \"a.jsx-3463146278{position:relative;display:block;}\", \"ul.jsx-3463146278{margin:0;padding:0;list-style:none;}\", \"li.jsx-3463146278{margin-bottom:2em;}\", \"h2.jsx-3463146278{position:absolute;bottom:5px;left:25px;padding:20px 30px;color:#fff;background-color:#111;}\", \"p.jsx-3463146278{position:absolute;background-color:#111;color:#fff;padding:4px 8px;left:0;text-align:center;-webkit-letter-spacing:-2px;-moz-letter-spacing:-2px;-ms-letter-spacing:-2px;letter-spacing:-2px;font-weight:700;top:0;}\", \"@media only screen and (max-width:480px){h2.jsx-3463146278{font-size:36px;padding:10px 15px;width:100%;}}\"]));\n  }\n\n  return React.createElement(\"div\", null, \"Loading\");\n}\n\nexport var allPosts = gql(_templateObject());\nexport var allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n}; // The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\n\nexport default graphql(allPosts, {\n  props: function props(_ref2) {\n    var data = _ref2.data;\n    return {\n      data: data,\n      loadMorePosts: function loadMorePosts() {\n        return data.fetchMore({\n          variables: {\n            skip: data.allPosts.length\n          },\n          updateQuery: function updateQuery(previousResult, _ref3) {\n            var fetchMoreResult = _ref3.fetchMoreResult;\n\n            if (!fetchMoreResult) {\n              return previousResult;\n            }\n\n            return _Object$assign({}, previousResult, {\n              // Append the new posts results to the old one\n              allPosts: [].concat(_toConsumableArray(previousResult.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n            });\n          }\n        });\n      }\n    };\n  }\n})(PostList);","map":null,"metadata":{},"sourceType":"module"}