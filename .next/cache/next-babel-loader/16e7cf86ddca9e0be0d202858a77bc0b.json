{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo'; // Gets the display name of a JSX component for dev tools\n\nfunction getComponentDisplayName(Component) {\n  return Component.displayName || Component.name || 'Unknown';\n}\n\nexport default (ComposedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class WithApollo extends React.Component {\n    static async getInitialProps(ctx) {\n      // Initial serverState with apollo (empty)\n      let serverState = {\n        apollo: {\n          data: {}\n        }\n      }; // Evaluate the composed component's getInitialProps()\n\n      let composedInitialProps = {};\n\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      if (!process.browser) {\n        const apollo = initApollo();\n\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(React.createElement(ApolloProvider, {\n            client: apollo\n          }, React.createElement(ComposedComponent, composedInitialProps)), {\n            router: {\n              asPath: ctx.asPath,\n              pathname: ctx.pathname,\n              query: ctx.query\n            }\n          });\n        } catch (error) {} // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind(); // Extract query data from the store\n\n        const state = {}; // Extract query data from the Apollo store\n\n        serverState = _Object$assign(state, {\n          apollo: {\n            data: apollo.cache.extract()\n          }\n        });\n      }\n\n      return _objectSpread({\n        serverState\n      }, composedInitialProps);\n    }\n\n    constructor(props) {\n      super(props);\n      this.apollo = initApollo(props.serverState.apollo.data);\n    }\n\n    render() {\n      return React.createElement(ApolloProvider, {\n        client: this.apollo\n      }, React.createElement(ComposedComponent, this.props));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithApollo(${getComponentDisplayName(ComposedComponent)})`), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/var/www/netlify-site/lib/withApollo.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","Head","initApollo","getComponentDisplayName","Component","displayName","name","ComposedComponent","WithApollo","getInitialProps","ctx","serverState","apollo","data","composedInitialProps","process","browser","router","asPath","pathname","query","error","rewind","state","cache","extract","constructor","props","render","object","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,SAASC,uBAAT,CAAkCC,SAAlC,EAA6C;AAC3C,SAAOA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACE,IAAnC,IAA2C,SAAlD;AACD;;AAED,gBAAeC,iBAAiB,IAAI;AAAA;;AAClC,0BAAO,MAAMC,UAAN,SAAyBX,KAAK,CAACO,SAA/B,CAAyC;AAQ9C,iBAAaK,eAAb,CAA8BC,GAA9B,EAAmC;AACjC;AACA,UAAIC,WAAW,GAAG;AAChBC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE;AADA;AADQ,OAAlB,CAFiC,CAQjC;;AACA,UAAIC,oBAAoB,GAAG,EAA3B;;AACA,UAAIP,iBAAiB,CAACE,eAAtB,EAAuC;AACrCK,QAAAA,oBAAoB,GAAG,MAAMP,iBAAiB,CAACE,eAAlB,CAAkCC,GAAlC,CAA7B;AACD,OAZgC,CAcjC;AACA;;;AACA,UAAI,CAACK,OAAO,CAACC,OAAb,EAAsB;AACpB,cAAMJ,MAAM,GAAGV,UAAU,EAAzB;;AAEA,YAAI;AACF;AACA,gBAAMF,eAAe,CACnB,oBAAC,cAAD;AAAgB,YAAA,MAAM,EAAEY;AAAxB,aACE,oBAAC,iBAAD,EAAuBE,oBAAvB,CADF,CADmB,EAInB;AACEG,YAAAA,MAAM,EAAE;AACNC,cAAAA,MAAM,EAAER,GAAG,CAACQ,MADN;AAENC,cAAAA,QAAQ,EAAET,GAAG,CAACS,QAFR;AAGNC,cAAAA,KAAK,EAAEV,GAAG,CAACU;AAHL;AADV,WAJmB,CAArB;AAYD,SAdD,CAcE,OAAOC,KAAP,EAAc,CAIf,CAJC,CACA;AACA;AACA;AAEF;AACA;;;AACApB,QAAAA,IAAI,CAACqB,MAAL,GAxBoB,CA0BpB;;AACA,cAAMC,KAAK,GAAG,EAAd,CA3BoB,CA6BpB;;AACAZ,QAAAA,WAAW,GAAG,eAAcY,KAAd,EAAqB;AACjCX,UAAAA,MAAM,EAAE;AAAEC,YAAAA,IAAI,EAAED,MAAM,CAACY,KAAP,CAAaC,OAAb;AAAR;AADyB,SAArB,CAAd;AAGD;;AAED;AACEd,QAAAA;AADF,SAEKG,oBAFL;AAID;;AAEDY,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,YAAMA,KAAN;AACA,WAAKf,MAAL,GAAcV,UAAU,CAACyB,KAAK,CAAChB,WAAN,CAAkBC,MAAlB,CAAyBC,IAA1B,CAAxB;AACD;;AAEDe,IAAAA,MAAM,GAAI;AACR,aACE,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAE,KAAKhB;AAA7B,SACE,oBAAC,iBAAD,EAAuB,KAAKe,KAA5B,CADF,CADF;AAKD;;AA5E6C,GAAhD,yCACwB,cAAaxB,uBAAuB,CACxDI,iBADwD,CAExD,GAHJ,wCAIqB;AACjBI,IAAAA,WAAW,EAAEb,SAAS,CAAC+B,MAAV,CAAiBC;AADb,GAJrB;AA8ED,CA/ED","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\nimport initApollo from './initApollo'\n\n// Gets the display name of a JSX component for dev tools\nfunction getComponentDisplayName (Component) {\n  return Component.displayName || Component.name || 'Unknown'\n}\n\nexport default ComposedComponent => {\n  return class WithApollo extends React.Component {\n    static displayName = `WithApollo(${getComponentDisplayName(\n      ComposedComponent\n    )})`\n    static propTypes = {\n      serverState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps (ctx) {\n      // Initial serverState with apollo (empty)\n      let serverState = {\n        apollo: {\n          data: {}\n        }\n      }\n\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      if (!process.browser) {\n        const apollo = initApollo()\n\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <ApolloProvider client={apollo}>\n              <ComposedComponent {...composedInitialProps} />\n            </ApolloProvider>,\n            {\n              router: {\n                asPath: ctx.asPath,\n                pathname: ctx.pathname,\n                query: ctx.query\n              }\n            }\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        }\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the store\n        const state = {}\n\n        // Extract query data from the Apollo store\n        serverState = Object.assign(state, {\n          apollo: { data: apollo.cache.extract() }\n        })\n      }\n\n      return {\n        serverState,\n        ...composedInitialProps\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apollo = initApollo(props.serverState.apollo.data)\n    }\n\n    render () {\n      return (\n        <ApolloProvider client={this.apollo}>\n          <ComposedComponent {...this.props} />\n        </ApolloProvider>\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}