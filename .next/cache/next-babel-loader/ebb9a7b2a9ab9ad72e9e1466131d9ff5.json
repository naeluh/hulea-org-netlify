{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query webs($id: String!) {\\n    webs(where: { URL: $id }, limit: 1) {\\n      Title\\n      _id\\n      Image {\\n        url\\n        ext\\n        provider\\n        size\\n      }\\n      Description\\n      Data\\n      URL\\n      Link\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// @ts-check\nimport React from \"react\";\nimport { withRouter, Router, Link } from \"next/router\";\nimport { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ReactMarkdown from \"react-markdown\";\nimport Head from \"next/head\";\nimport PostList from \"./PostList\";\n\nfunction Post(_ref) {\n  var _ref$data = _ref.data,\n      error = _ref$data.error,\n      webs = _ref$data.webs;\n  var web = webs[0];\n  var image = web.Image !== null ? React.createElement(\"span\", {\n    id: \"image\",\n    className: \"imgHero\",\n    style: {\n      backgroundImage: \"url(https://strapi.hulea.org/\".concat(web.Image.url, \")\")\n    }\n  }) : \"\";\n  if (error) return React.createElement(ErrorMessage, {\n    message: \"Error loading post.\"\n  });\n\n  if (web) {\n    return React.createElement(\"article\", null, React.createElement(\"section\", null, React.createElement(Head, null, React.createElement(\"title\", null, web.Title), React.createElement(\"meta\", {\n      name: \"title\",\n      content: web.Title\n    }), React.createElement(\"meta\", {\n      name: \"description\",\n      content: web.Description\n    })), React.createElement(\"div\", {\n      key: web.id\n    }, React.createElement(\"h1\", null, web.Title), image, React.createElement(ReactMarkdown, {\n      source: web.Description\n    }), React.createElement(\"a\", {\n      className: \"dash-link\",\n      target: \"_blank\",\n      href: web.Link\n    }, \"go to website >\"))), React.createElement(PostList, {\n      title: web.URL,\n      extraClass: \"worklist\"\n    }));\n  }\n\n  return React.createElement(\"div\", null, \"Loading\");\n}\n\nvar post = gql(_templateObject()); // The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\n\nvar ComponentWithMutation = graphql(post, {\n  options: function options(_ref2) {\n    var query = _ref2.router.query;\n    return {\n      variables: {\n        id: query.id\n      }\n    };\n  },\n  props: function props(_ref3) {\n    var data = _ref3.data;\n    return {\n      data: data\n    };\n  }\n})(Post);\nexport default withRouter(ComponentWithMutation);","map":{"version":3,"sources":["/var/www/netlify-site/components/Post.jsx"],"names":["React","withRouter","Router","Link","graphql","gql","ErrorMessage","ReactMarkdown","Head","PostList","Post","data","error","webs","web","image","Image","backgroundImage","url","Title","Description","id","URL","post","ComponentWithMutation","options","query","router","variables","props"],"mappings":";;;;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,IAAT,OAAyC;AAAA,uBAAzBC,IAAyB;AAAA,MAAjBC,KAAiB,aAAjBA,KAAiB;AAAA,MAAVC,IAAU,aAAVA,IAAU;AACvC,MAAIC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAd;AACA,MAAIE,KAAK,GACPD,GAAG,CAACE,KAAJ,KAAc,IAAd,GACE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,SAAS,EAAC,SAFZ;AAGE,IAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,yCAAkCH,GAAG,CAACE,KAAJ,CAAUE,GAA5C;AADV;AAHT,IADF,GASE,EAVJ;AAYA,MAAIN,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAC;AAAtB,IAAP;;AACX,MAAIE,GAAJ,EAAS;AACP,WACE,qCACE,qCACE,oBAAC,IAAD,QACE,mCAAQA,GAAG,CAACK,KAAZ,CADF,EAEE;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,OAAO,EAAEL,GAAG,CAACK;AAAhC,MAFF,EAGE;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAEL,GAAG,CAACM;AAAtC,MAHF,CADF,EAME;AAAK,MAAA,GAAG,EAAEN,GAAG,CAACO;AAAd,OACE,gCAAKP,GAAG,CAACK,KAAT,CADF,EAEGJ,KAFH,EAGE,oBAAC,aAAD;AAAe,MAAA,MAAM,EAAED,GAAG,CAACM;AAA3B,MAHF,EAIE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,MAAM,EAAC,QAAhC;AAAyC,MAAA,IAAI,EAAEN,GAAG,CAACX;AAAnD,yBAJF,CANF,CADF,EAgBE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEW,GAAG,CAACQ,GAArB;AAA0B,MAAA,UAAU,EAAC;AAArC,MAhBF,CADF;AAoBD;;AACD,SAAO,2CAAP;AACD;;AAED,IAAMC,IAAI,GAAGlB,GAAH,mBAAV,C,CAqBA;AACA;;AACA,IAAMmB,qBAAqB,GAAGpB,OAAO,CAACmB,IAAD,EAAO;AAC1CE,EAAAA,OAAO,EAAE;AAAA,QAAaC,KAAb,SAAGC,MAAH,CAAaD,KAAb;AAAA,WAA4B;AACnCE,MAAAA,SAAS,EAAE;AACTP,QAAAA,EAAE,EAAEK,KAAK,CAACL;AADD;AADwB,KAA5B;AAAA,GADiC;AAM1CQ,EAAAA,KAAK,EAAE;AAAA,QAAGlB,IAAH,SAAGA,IAAH;AAAA,WAAe;AACpBA,MAAAA,IAAI,EAAJA;AADoB,KAAf;AAAA;AANmC,CAAP,CAAP,CAS3BD,IAT2B,CAA9B;AAWA,eAAeT,UAAU,CAACuB,qBAAD,CAAzB","sourcesContent":["// @ts-check\n\nimport React from \"react\";\nimport { withRouter, Router, Link } from \"next/router\";\nimport { graphql } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ReactMarkdown from \"react-markdown\";\nimport Head from \"next/head\";\nimport PostList from \"./PostList\";\n\nfunction Post({ data: { error, webs } }) {\n  let web = webs[0];\n  let image =\n    web.Image !== null ? (\n      <span\n        id=\"image\"\n        className=\"imgHero\"\n        style={{\n          backgroundImage: `url(https://strapi.hulea.org/${web.Image.url})`\n        }}\n      />\n    ) : (\n      \"\"\n    );\n  if (error) return <ErrorMessage message=\"Error loading post.\" />;\n  if (web) {\n    return (\n      <article>\n        <section>\n          <Head>\n            <title>{web.Title}</title>\n            <meta name=\"title\" content={web.Title} />\n            <meta name=\"description\" content={web.Description} />\n          </Head>\n          <div key={web.id}>\n            <h1>{web.Title}</h1>\n            {image}\n            <ReactMarkdown source={web.Description} />\n            <a className=\"dash-link\" target=\"_blank\" href={web.Link}>\n              go to website >\n            </a>\n          </div>\n        </section>\n        <PostList title={web.URL} extraClass=\"worklist\" />\n      </article>\n    );\n  }\n  return <div>Loading</div>;\n}\n\nconst post = gql`\n  query webs($id: String!) {\n    webs(where: { URL: $id }, limit: 1) {\n      Title\n      _id\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Description\n      Data\n      URL\n      Link\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nconst ComponentWithMutation = graphql(post, {\n  options: ({ router: { query } }) => ({\n    variables: {\n      id: query.id\n    }\n  }),\n  props: ({ data }) => ({\n    data\n  })\n})(Post);\n\nexport default withRouter(ComponentWithMutation);\n"]},"metadata":{},"sourceType":"module"}